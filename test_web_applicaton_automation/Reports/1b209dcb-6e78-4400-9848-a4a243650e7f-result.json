{"name": "test_assertion_web_pagelogo", "status": "failed", "statusDetails": {"message": "AssertionError: Page Logo Assertion Failed Due To: Condition is not False: Condition is not False\nassert False", "trace": "message = 'Condition is not False'\n\n    def assert_always_false(message=\"Condition is not False\"):\n        try:\n>           assert False, message\nE           AssertionError: Condition is not False\nE           assert False\n\ntest_vcm_automation\\test_functions\\test_sellenium_assertions.py:51: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_Scripts.test_vcm_login_page.TestVWebPage testMethod=test_assertion_web_pagelogo>\n\n    @allure.severity(allure.severity_level.NORMAL)\n    def test_assertion_web_pagelogo(self):\n        driver = test_sellinium_functions.initialize_driver()\n    \n        try:\n            test_sellinium_functions.maximize_window(driver)\n            test_sellinium_functions.open_page(driver, data.expected_login_page_url)\n    \n            login_page = login(driver)\n    \n            logo_displayed = test_sellinium_functions.get_element_attribute(login_page.logo, \"src\")\n    \n            if logo_displayed == data.expected_logo_source:\n    \n                test_sellenium_assertions.assert_always_true()\n    \n                driver.close()\n            else:\n    \n                test_allure_functions2.AllureFunctions2(driver).attach_screenshot(\"Page_Logo_assertion_fail\")\n>               test_sellenium_assertions.assert_always_false()\n\ntest_vcm_automation\\test_Scripts\\test_vcm_login_page.py:71: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nmessage = 'Condition is not False'\n\n    def assert_always_false(message=\"Condition is not False\"):\n        try:\n            assert False, message\n        except AssertionError as e:\n>           raise AssertionError(f\"{message}: {e}\")\nE           AssertionError: Condition is not False: Condition is not False\nE           assert False\n\ntest_vcm_automation\\test_functions\\test_sellenium_assertions.py:53: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_Scripts.test_vcm_login_page.TestVWebPage testMethod=test_assertion_web_pagelogo>\n\n    @allure.severity(allure.severity_level.NORMAL)\n    def test_assertion_web_pagelogo(self):\n        driver = test_sellinium_functions.initialize_driver()\n    \n        try:\n            test_sellinium_functions.maximize_window(driver)\n            test_sellinium_functions.open_page(driver, data.expected_login_page_url)\n    \n            login_page = login(driver)\n    \n            logo_displayed = test_sellinium_functions.get_element_attribute(login_page.logo, \"src\")\n    \n            if logo_displayed == data.expected_logo_source:\n    \n                test_sellenium_assertions.assert_always_true()\n    \n                driver.close()\n            else:\n    \n                test_allure_functions2.AllureFunctions2(driver).attach_screenshot(\"Page_Logo_assertion_fail\")\n                test_sellenium_assertions.assert_always_false()\n    \n        except Exception as e:\n>           raise AssertionError(f\"Page Logo Assertion Failed Due To: {e}\")\nE           AssertionError: Page Logo Assertion Failed Due To: Condition is not False: Condition is not False\nE           assert False\n\ntest_vcm_automation\\test_Scripts\\test_vcm_login_page.py:74: AssertionError"}, "attachments": [{"name": "Page_Logo_assertion_fail", "source": "ed477c02-bec0-43fd-9944-707edf3ea7db-attachment.png", "type": "image/png"}], "start": 1692029401174, "stop": 1692029413906, "uuid": "baad88b2-6770-433d-97f4-4a0f9dd53b4b", "historyId": "678f381f4c9d19625c41ebe7c18b4e39", "testCaseId": "678f381f4c9d19625c41ebe7c18b4e39", "fullName": "test_vcm_automation.test_Scripts.test_vcm_login_page.TestVWebPage#test_assertion_web_pagelogo", "labels": [{"name": "severity", "value": "normal"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup_teardown')"}, {"name": "parentSuite", "value": "test_vcm_automation.test_Scripts"}, {"name": "suite", "value": "test_vcm_login_page"}, {"name": "subSuite", "value": "TestVWebPage"}, {"name": "host", "value": "DESKTOP-UIEVDL1"}, {"name": "thread", "value": "9340-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_vcm_automation.test_Scripts.test_vcm_login_page"}]}