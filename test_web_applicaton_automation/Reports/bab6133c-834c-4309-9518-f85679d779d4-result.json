{"name": "test_assertionPageLogo", "status": "failed", "statusDetails": {"message": "AssertionError: Page Logo Assertion Failed Due To: element not found: element not found\nassert not True", "trace": "condition = True, message = 'element not found'\n\n    def assert_false(condition, message=\"Element is not find\"):\n        try:\n>           assert not condition, message\nE           AssertionError: element not found\nE           assert not True\n\ntest_vcm_automation\\test_functions\\test_sellenium_assertions.py:53: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_Scripts.test_vcm_login_page.TestVCMLoginPage testMethod=test_assertionPageLogo>\n\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_assertionPageLogo(self):\n        driver = test_sellinium_functions.initialize_driver()\n    \n        try:\n            test_sellinium_functions.maximize_window(driver)\n            test_sellinium_functions.open_page(driver, data.expected_login_page_url)\n    \n            # Create a login page object\n            login_page = login(driver)\n    \n            # Check if the logo element is displayed\n            logo_displayed = test_sellinium_functions.get_element_attribute(login_page.logo, \"src\")\n            # test_sellenium_assertions.assert_condition(logo_displayed, True, \"Logo is not displayed\")\n    \n            if logo_displayed == data.expected_logo_source:\n                # Logo is displayed, test passes\n                test_sellenium_assertions.assert_true(test_sellinium_functions.is_element_displayed(login_page.logo))\n    \n                driver.close()\n            else:\n                # Logo is not displayed, test fails\n    \n                test_allure_functions2.AllureFunctions2(driver).attach_screenshot(\"Page_Logo_assertion_fail\")\n>               test_sellenium_assertions.assert_false(test_sellinium_functions.is_element_displayed(login_page.logo),\n                                                       \"element not found\")\n\ntest_vcm_automation\\test_Scripts\\test_vcm_login_page.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncondition = True, message = 'element not found'\n\n    def assert_false(condition, message=\"Element is not find\"):\n        try:\n            assert not condition, message\n        except AssertionError as e:\n>           raise AssertionError(f\"{message}: {e}\")\nE           AssertionError: element not found: element not found\nE           assert not True\n\ntest_vcm_automation\\test_functions\\test_sellenium_assertions.py:55: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_Scripts.test_vcm_login_page.TestVCMLoginPage testMethod=test_assertionPageLogo>\n\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_assertionPageLogo(self):\n        driver = test_sellinium_functions.initialize_driver()\n    \n        try:\n            test_sellinium_functions.maximize_window(driver)\n            test_sellinium_functions.open_page(driver, data.expected_login_page_url)\n    \n            # Create a login page object\n            login_page = login(driver)\n    \n            # Check if the logo element is displayed\n            logo_displayed = test_sellinium_functions.get_element_attribute(login_page.logo, \"src\")\n            # test_sellenium_assertions.assert_condition(logo_displayed, True, \"Logo is not displayed\")\n    \n            if logo_displayed == data.expected_logo_source:\n                # Logo is displayed, test passes\n                test_sellenium_assertions.assert_true(test_sellinium_functions.is_element_displayed(login_page.logo))\n    \n                driver.close()\n            else:\n                # Logo is not displayed, test fails\n    \n                test_allure_functions2.AllureFunctions2(driver).attach_screenshot(\"Page_Logo_assertion_fail\")\n                test_sellenium_assertions.assert_false(test_sellinium_functions.is_element_displayed(login_page.logo),\n                                                       \"element not found\")\n    \n        except Exception as e:\n>           raise AssertionError(f\"Page Logo Assertion Failed Due To: {e}\")\nE           AssertionError: Page Logo Assertion Failed Due To: element not found: element not found\nE           assert not True\n\ntest_vcm_automation\\test_Scripts\\test_vcm_login_page.py:77: AssertionError"}, "attachments": [{"name": "Page_Logo_assertion_fail", "source": "1b59a985-c066-4d11-b516-b4836338ced9-attachment.png", "type": "image/png"}], "start": 1691980522774, "stop": 1691980534724, "uuid": "6059033c-37c0-4763-9db2-1ac00be64050", "historyId": "569ca2ffa336fbc568251e94526859ab", "testCaseId": "569ca2ffa336fbc568251e94526859ab", "fullName": "test_vcm_automation.test_Scripts.test_vcm_login_page.TestVCMLoginPage#test_assertionPageLogo", "labels": [{"name": "severity", "value": "critical"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup_teardown')"}, {"name": "parentSuite", "value": "test_vcm_automation.test_Scripts"}, {"name": "suite", "value": "test_vcm_login_page"}, {"name": "subSuite", "value": "TestVCMLoginPage"}, {"name": "host", "value": "DESKTOP-UIEVDL1"}, {"name": "thread", "value": "11196-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_vcm_automation.test_Scripts.test_vcm_login_page"}]}