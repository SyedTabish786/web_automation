{"name": "test_login_form_input_fields", "status": "failed", "statusDetails": {"message": "AssertionError: {AssertionError('User Input Field Attribute Assertion Failed: User Input Field Attribute Assertion Failed\\nassert False')}", "trace": "message = 'User Input Field Attribute Assertion Failed'\n\n    def assert_always_false(message):\n        try:\n>           assert False, message\nE           AssertionError: User Input Field Attribute Assertion Failed\nE           assert False\n\ntest_vcm_automation\\test_functions\\test_sellenium_assertions.py:52: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_Scripts.test_vcm_login_page.TestVWebPage testMethod=test_login_form_input_fields>\n\n    @allure.severity(allure.severity_level.NORMAL)\n    def test_login_form_input_fields(self):\n        driver = test_sellinium_functions.initialize_driver()\n    \n        try:\n            test_sellinium_functions.maximize_window(driver)\n            test_sellinium_functions.open_page(driver, data.expected_login_page_url)\n            login_page = login(driver)\n            user_input_field_attribute = test_sellinium_functions.get_element_attribute(login_page.user_name,\n                                                                                        element_attributes.user_input_field_attribute)\n            if user_input_field_attribute == login_page.user_name:\n                test_sellenium_assertions.assert_always_true(\n                    passed_assertion_messages.user_input_field_attribute_assertion_passed)\n                driver.close()\n            else:\n    \n                test_allure_functions2.AllureFunctions2(driver).attach_screenshot(\n                    screenshots_names.user_input_field_attribute_assertion_failed)\n>               test_sellenium_assertions.assert_always_false(\n                    failed_assertion_messages.user_input_field_attribute_assertion_failed)\n\ntest_vcm_automation\\test_Scripts\\test_vcm_login_page.py:98: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmessage = 'User Input Field Attribute Assertion Failed'\n\n    def assert_always_false(message):\n        try:\n            assert False, message\n    \n        except AssertionError as e:\n>           raise AssertionError(f\"{message}: {e}\")\nE           AssertionError: User Input Field Attribute Assertion Failed: User Input Field Attribute Assertion Failed\nE           assert False\n\ntest_vcm_automation\\test_functions\\test_sellenium_assertions.py:55: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_Scripts.test_vcm_login_page.TestVWebPage testMethod=test_login_form_input_fields>\n\n    @allure.severity(allure.severity_level.NORMAL)\n    def test_login_form_input_fields(self):\n        driver = test_sellinium_functions.initialize_driver()\n    \n        try:\n            test_sellinium_functions.maximize_window(driver)\n            test_sellinium_functions.open_page(driver, data.expected_login_page_url)\n            login_page = login(driver)\n            user_input_field_attribute = test_sellinium_functions.get_element_attribute(login_page.user_name,\n                                                                                        element_attributes.user_input_field_attribute)\n            if user_input_field_attribute == login_page.user_name:\n                test_sellenium_assertions.assert_always_true(\n                    passed_assertion_messages.user_input_field_attribute_assertion_passed)\n                driver.close()\n            else:\n    \n                test_allure_functions2.AllureFunctions2(driver).attach_screenshot(\n                    screenshots_names.user_input_field_attribute_assertion_failed)\n                test_sellenium_assertions.assert_always_false(\n                    failed_assertion_messages.user_input_field_attribute_assertion_failed)\n        except Exception as e:\n>           raise AssertionError({e})\nE           AssertionError: {AssertionError('User Input Field Attribute Assertion Failed: User Input Field Attribute Assertion Failed\\nassert False')}\n\ntest_vcm_automation\\test_Scripts\\test_vcm_login_page.py:101: AssertionError"}, "attachments": [{"name": " user_input_field_attribute_assertion_failed", "source": "0aecdf6b-9e1e-4f53-a10c-c972b1296e65-attachment.png", "type": "image/png"}], "start": 1692073973922, "stop": 1692073983143, "uuid": "f1ccece4-60dc-4c50-aa1b-797834732837", "historyId": "afdec496345aae52627b92ce1e72cf17", "testCaseId": "afdec496345aae52627b92ce1e72cf17", "fullName": "test_vcm_automation.test_Scripts.test_vcm_login_page.TestVWebPage#test_login_form_input_fields", "labels": [{"name": "severity", "value": "normal"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup_teardown')"}, {"name": "parentSuite", "value": "test_vcm_automation.test_Scripts"}, {"name": "suite", "value": "test_vcm_login_page"}, {"name": "subSuite", "value": "TestVWebPage"}, {"name": "host", "value": "DESKTOP-UIEVDL1"}, {"name": "thread", "value": "4716-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_vcm_automation.test_Scripts.test_vcm_login_page"}]}