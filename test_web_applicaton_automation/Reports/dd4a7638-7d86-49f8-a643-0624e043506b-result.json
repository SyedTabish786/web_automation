{"name": "test_assertion_web_pagelogo", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: disconnected: not connected to DevTools\n  (failed to check if window was closed: disconnected: not connected to DevTools)\n  (Session info: chrome=115.0.5790.171)\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x00007FF7D4DF4A62+57106]\n\t(No symbol) [0x00007FF7D4D6CF52]\n\t(No symbol) [0x00007FF7D4C3E2CB]\n\t(No symbol) [0x00007FF7D4C2A776]\n\t(No symbol) [0x00007FF7D4C2AEAE]\n\t(No symbol) [0x00007FF7D4C2ADE0]\n\t(No symbol) [0x00007FF7D4C1CA8A]\n\t(No symbol) [0x00007FF7D4C1D66D]\n\t(No symbol) [0x00007FF7D4CA06D4]\n\t(No symbol) [0x00007FF7D4C96980]\n\t(No symbol) [0x00007FF7D4C6CE81]\n\t(No symbol) [0x00007FF7D4C6E064]\n\tGetHandleVerifier [0x00007FF7D50A4222+2873042]\n\tGetHandleVerifier [0x00007FF7D50F6590+3209792]\n\tGetHandleVerifier [0x00007FF7D50EF3AF+3180639]\n\tGetHandleVerifier [0x00007FF7D4E85F25+652245]\n\t(No symbol) [0x00007FF7D4D78618]\n\t(No symbol) [0x00007FF7D4D747C4]\n\t(No symbol) [0x00007FF7D4D748BC]\n\t(No symbol) [0x00007FF7D4D64C33]\n\tBaseThreadInitThunk [0x00007FFE45F07614+20]\n\tRtlUserThreadStart [0x00007FFE47D826B1+33]", "trace": "self = <allure_commons._allure.fixture object at 0x00000153B82525D0>, args = (), kwargs = {}\n\n    def __call__(self, *args, **kwargs):\n        self.parameters = func_parameters(self._fixture_function, *args, **kwargs)\n    \n        with self:\n>           return self._fixture_function(*args, **kwargs)\n\nvenv\\Lib\\site-packages\\allure_commons\\_allure.py:221: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_vcm_automation\\Test_base\\test_EnvironmentSetup.py:25: in setup_teardown\n    self.driver.close()\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:456: in close\n    self.execute(Command.CLOSE)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000153B8260A90>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"disconnected\",\"message\":\"disconnected: not connected to DevTools\\\\n  (fai...07FF7D4D64C33]\\\\n\\\\tBaseThreadInitThunk [0x00007FFE45F07614+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFE47D826B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: disconnected: not connected to DevTools\nE         (failed to check if window was closed: disconnected: not connected to DevTools)\nE         (Session info: chrome=115.0.5790.171)\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x00007FF7D4DF4A62+57106]\nE       \t(No symbol) [0x00007FF7D4D6CF52]\nE       \t(No symbol) [0x00007FF7D4C3E2CB]\nE       \t(No symbol) [0x00007FF7D4C2A776]\nE       \t(No symbol) [0x00007FF7D4C2AEAE]\nE       \t(No symbol) [0x00007FF7D4C2ADE0]\nE       \t(No symbol) [0x00007FF7D4C1CA8A]\nE       \t(No symbol) [0x00007FF7D4C1D66D]\nE       \t(No symbol) [0x00007FF7D4CA06D4]\nE       \t(No symbol) [0x00007FF7D4C96980]\nE       \t(No symbol) [0x00007FF7D4C6CE81]\nE       \t(No symbol) [0x00007FF7D4C6E064]\nE       \tGetHandleVerifier [0x00007FF7D50A4222+2873042]\nE       \tGetHandleVerifier [0x00007FF7D50F6590+3209792]\nE       \tGetHandleVerifier [0x00007FF7D50EF3AF+3180639]\nE       \tGetHandleVerifier [0x00007FF7D4E85F25+652245]\nE       \t(No symbol) [0x00007FF7D4D78618]\nE       \t(No symbol) [0x00007FF7D4D747C4]\nE       \t(No symbol) [0x00007FF7D4D748BC]\nE       \t(No symbol) [0x00007FF7D4D64C33]\nE       \tBaseThreadInitThunk [0x00007FFE45F07614+20]\nE       \tRtlUserThreadStart [0x00007FFE47D826B1+33]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: WebDriverException"}, "start": 1692027712984, "stop": 1692027738057, "uuid": "bad2599d-725e-42f4-9731-ec787f0f490a", "historyId": "678f381f4c9d19625c41ebe7c18b4e39", "testCaseId": "678f381f4c9d19625c41ebe7c18b4e39", "fullName": "test_vcm_automation.test_Scripts.test_vcm_login_page.TestVWebPage#test_assertion_web_pagelogo", "labels": [{"name": "severity", "value": "normal"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup_teardown')"}, {"name": "parentSuite", "value": "test_vcm_automation.test_Scripts"}, {"name": "suite", "value": "test_vcm_login_page"}, {"name": "subSuite", "value": "TestVWebPage"}, {"name": "host", "value": "DESKTOP-UIEVDL1"}, {"name": "thread", "value": "7580-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_vcm_automation.test_Scripts.test_vcm_login_page"}]}